// <auto-generated />
using System;
using CarteirasInvestimento.DataAcess.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarteirasInvestimento.DataAcess.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("AtivoCarteira", b =>
                {
                    b.Property<int>("AtivosId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarteirasId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AtivosId", "CarteirasId");

                    b.HasIndex("CarteirasId");

                    b.ToTable("AtivoCarteira");
                });

            modelBuilder.Entity("CarteirasInvestimento.DataAcess.Entity.Ativo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Codigo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("PrecoUnitario");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INT")
                        .HasColumnName("Quantidade");

                    b.Property<int>("Tipo")
                        .HasColumnType("INT")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Ativo", (string)null);
                });

            modelBuilder.Entity("CarteirasInvestimento.DataAcess.Entity.Carteira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AtivoId")
                        .HasColumnType("INT")
                        .HasColumnName("AtivoId");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INT")
                        .HasColumnName("ClienteId");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCadastro");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Carteira", (string)null);
                });

            modelBuilder.Entity("CarteirasInvestimento.DataAcess.Entity.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("Cep");

                    b.Property<string>("Complemento")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Complemento");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataAtualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCadastro");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Logadouro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Logadouro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<int>("Numero")
                        .HasMaxLength(100)
                        .HasColumnType("INT")
                        .HasColumnName("Numero");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("Telefone");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("AtivoCarteira", b =>
                {
                    b.HasOne("CarteirasInvestimento.DataAcess.Entity.Ativo", null)
                        .WithMany()
                        .HasForeignKey("AtivosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarteirasInvestimento.DataAcess.Entity.Carteira", null)
                        .WithMany()
                        .HasForeignKey("CarteirasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarteirasInvestimento.DataAcess.Entity.Carteira", b =>
                {
                    b.HasOne("CarteirasInvestimento.DataAcess.Entity.Cliente", "Cliente")
                        .WithMany("Carteiras")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("CarteirasInvestimento.DataAcess.Entity.Cliente", b =>
                {
                    b.Navigation("Carteiras");
                });
#pragma warning restore 612, 618
        }
    }
}
